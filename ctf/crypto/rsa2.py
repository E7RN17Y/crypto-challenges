from sympy import Symbol, solve
import gmpy2

def wiener_attack(e, n):
    # Approximating d using continued fraction expansion of e/n
    frac = continued_fraction(e, n)
    convergents = convergents_from_contfrac(frac)
    
    for frac in convergents:
        k, d = frac.numerator, frac.denominator
        if k == 0:
            continue
        phi = (e * d - 1) // k
        b = n - phi + 1
        delta = b ** 2 - 4 * n
        if delta >= 0:
            roots = gmpy2.iroot(gmpy2.mpz(delta), 2)
            if roots[1]:
                if (b + roots[0]) % 2 == 0:
                    return d

def continued_fraction(e, n):
    cf = []
    while n:
        q, r = divmod(e, n)
        cf.append(q)
        e, n = n, r
    return cf

def convergents_from_contfrac(cf):
    n0, n1 = 1, cf[0]
    d0, d1 = 0, 1
    yield n1, d1
    for i in cf[1:]:
        n2, d2 = i * n1 + n0, i * d1 + d0
        yield n2, d2
        n0, n1 = n1, n2
        d0, d1 = d1, d2

# Example usage:
e = 17
c = 123456789
n = 3233
d = wiener_attack(e, n)
print("d (using Wiener's attack):", d)

n = 421884595135545137832578916600616530070296982048650744896572223685182308416495132764337085116200271201471151184885201661000773110488708457336240579212972447581179263928817665643990801855558920519877822134266170084831838218385526442234363443301833392950530318690888419998638612343926180796396914688645889056610181276033

e = 283184142057086346969855617259634489205718834567229729391182661790117986042228250726052019226632377796622417724620012993643524360965434062406182395923315154922149966896715000573924936712692916366373497851274409079321171499373612571918443151963665615835431401490986347021507690716230355215787419981658329848610445262683

C = 393811737673616327822000713950965694311668633030023536563783817990187868986659665312348021981002952558721786188158561331981689008002705878804745823980512120783809433114544947812426214164156065052129891730918917484494073641058080430811561039988771873486949086913394767439470953546876194120659087943899304510041401909213

d = owiener.attack(e,n)

